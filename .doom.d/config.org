#+TITLE: Doom Emacs Config
#+AUTHOR: realsontaran
#+STARTUP: content
#+PROPERTY: header-args :tangle config.el

* My Doom Emacs Config
** User
#+begin_src emacs-lisp
(setq user-full-name "realsontaran"
      user-mail-address "therealsontaran@protonmailcom")
#+end_src

** Font, Theme
Setting up nice user interface.
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-big-font (font-spec :family "JetBrains Mono" :size 20)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 20)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))

(setq display-line-numbers-type t)
(setq doom-theme 'zaiste)
(setq fancy-splash-image "~/.doom.d/orangutan.png")
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))

;; Add some transparency
;; (set-frame-parameter (selected-frame) 'alpha '(90 90))
;; (add-to-list 'default-frame-alist '(alpha 90 90))
(windmove-default-keybindings)
#+end_src
** Change Theme
#+begin_src emacs-lisp
;; (defun synchronize-theme ()
;;   (let* ((light-theme 'modus-operandi)
;;          (dark-theme 'modus-vivendi)
;;          (start-time-light-theme 6)
;;          (end-time-light-theme 17)
;;          (hour (string-to-number (substring (current-time-string) 11 13)))
;;          (next-theme (if (member hour (number-sequence start-time-light-theme end-time-light-theme))
;;                          light-theme dark-theme)))
;;     (when (not (equal doom-theme next-theme))
;;       (setq doom-theme next-theme)
;;       (load-theme next-theme))))

;; (run-with-timer 0 900 'synchronize-theme)
#+end_src
** Variable Setting
Setting some values.
#+begin_src emacs-lisp
(setq shell-file-name "/bin/zsh")
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t)

;; (setq doom-fallback-buffer-name "► Doom"
;;       +doom-dashboard-name "► Doom")

;; Mode-line
(display-time-mode t)
(unless (equal "Battery status not available"
               (battery))
  (display-battery-mode 1))
(setq auth-sources '("~/.authinfo"))
(setq save-interprogram-paste-before-kill nil)
#+end_src
** Some Functions
#+begin_src emacs-lisp
(map! :leader
      :desc "Org-Pomodoro"
      "v" #'org-pomodoro)
(map! :ne "M-/" #'comment-line)
(map! :ne "M-n" #'man)
(map! :leader
      :desc "Dired Jump"
      "[" #'dired-jump)
(map! :leader
      :desc "Org-Roam Insert"
      "r" #'org-roam-capture)

#+end_src
** Treemacs
#+begin_src emacs-lisp
(remove-hook 'doom-load-theme-hook #'doom-themes-treemacs-config)
#+end_src
** Which-Key Pop-Up
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5)
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src
** ORG-MODE
Setting todo keywords, org-agenda directories and some keymapping for funcional workspace.
#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(after! org
  (setq org-bullets-bullet-list '("●" "⎉" "⁘" "⁙" "⁜"))
  (setq org-priority-faces '((65 :foreground "#e45649")
                        (66 :foreground "#da8548")
                        (67 :foreground "#0098dd")))

  (setq org-directory "~/Dropbox/org/")
  (setq org-log-done 'time)
  (setq org-agenda-files (directory-files-recursively "~/Dropbox/org/" "\\.org$"))
  (setq org-todo-keywords
        '((sequence "TODO" "|" "DONE" "CNCL")
          (sequence "[ ]" "[-]" "|" "[X]")
          (sequence "LECTURE(l)" "|")
          (sequence "HOMEWORK" "PROJ" "TASK" "|" "DONE")
          (sequence "PLAY" "READ" "WATCH" "ONIT" "|" "DONE")
          ))
  (setq org-todo-keyword-faces
        '(("TODO" . "orange")
          ("HOMWRK" . "orange")
          ("DONE" . "green")
          ("CNCL" . (:foreground "red" :weight bold))
          ("LECTURE" . "purple")
          ("PLAY" . "pink")
          ("READ" . "pink")
          ("WATCH" . "blue")
          ("ONIT" . "yellow")
          ("[ ]" . "orange")
          ("[-]" . "yellow")
          ("[X]" . "green")))

  (add-hook 'org-mode-hook (lambda () (prettify-symbols-mode)))
  (setq org-ellipsis " ↴ "
        org-tags-column -80
        org-log-done 'time
        org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕"))
  (map!
   :map 'org-mode-map
   :localleader
   :ni "v" #'org-insert-clipboard-image ))
  ;; Create new Org buffer.
(evil-define-command evil-buffer-org-new (count file)
  "Creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)))))
(map! :leader
      (:prefix "b"
       :desc "New empty ORG buffer" "o" #'evil-buffer-org-new))
#+end_src

Function that inserts image to org file from clipboard.

#+begin_src emacs-lisp
(defun org-insert-clipboard-image ()
  "Insert screenshot to org file"
  (interactive)
  (make-directory "./resources/" :parents)
  (let ((filename (concat (format-time-string "%Y_%m_%d_%H%M%S") ".png")))
    (shell-command (concat "cd resources && " "xclip -selection clipboard -t image/png -o > " filename))
    (insert (concat "[[./resources/" filename "]]"))))
#+end_src

#+begin_src emacs-lisp
(defun my/modify-org-done-face ()
  (setq org-fontify-done-headline t)
  (set-face-attribute 'org-done nil :strike-through t)
  (set-face-attribute 'org-headline-done nil
                      :strike-through t
                      :foreground "light gray"))
(eval-after-load "org"
  (add-hook 'org-add-hook 'my/modify-org-done-face))
#+end_src
** Org-Capture
Capture my notes.
#+begin_src emacs-lisp
(setq +org-capture-notes-file "~/Dropbox/org/capture/notes.org"
      +org-capture-changelog-file "~/Dropbox/org/capture/changelog.org"
      +org-capture-todo-file "~/Dropbox/org/capture/todo.org"
      +org-capture-projects-file "~/Dropbox/org/capture/projects.org"
      +org-capture-journal-file "~/Dropbox/org/capture/journal.org")

(use-package! doct
  :commands (doct))

(after! org-capture
  (setq +org-capture-uni-units (condition-case nil
                                   (split-string (f-read-text "~/.org/.uni-units"))
                                 (error nil)))
  (defun +doct-icon-declaration-to-icon (declaration)
    "Convert :icon declaration to icon"
    (let ((name (pop declaration))
          (set  (intern (concat "all-the-icons-" (plist-get declaration :set))))
          (face (intern (concat "all-the-icons-" (plist-get declaration :color))))
          (v-adjust (or (plist-get declaration :v-adjust) 0.01)))
      (apply set `(,name :face ,face :v-adjust ,v-adjust))))

  (defun +doct-iconify-capture-templates (groups)
    "Add declaration's :icon to each template group in GROUPS."
    (let ((templates (doct-flatten-lists-in groups)))
      (setq doct-templates (mapcar (lambda (template)
                                     (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))
                                                 (spec (plist-get (plist-get props :doct) :icon)))
                                       (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)
                                                                      "\t"
                                                                      (nth 1 template))))
                                     template)
                                   templates))))
  (setq doct-after-conversion-functions '(+doct-iconify-capture-templates))

  #+end_src

  #+begin_src emacs-lisp
(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat
   (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
  )
  #+end_src

  #+begin_src emacs-lisp
 (defun set-org-capture-templates ()
    (setq org-capture-templates
          (doct `(
                  ("Protocol" :keys "p"
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Pocket Inbox"
                   :type entry
                   :template ("* TODO %(transform-square-brackets-to-round-ones\"%:description\")"
                              "Source: [[%:link][link]]"
                              "Captured On: %U"
                              "#+BEGIN_QUOTE"
                              "%i"
                              "#+END_QUOTE" "%?")
                   )
                  ("Protocol Link" :keys "L"
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Pocket Inbox"
                   :type entry
                   :template ("* TODO [[%:link][%(transform-square-brackets-to-round-ones\"%:description\")]]"
                              "Captured On: %U"
                              "%?")
                   )
                  ("Personal todo" :keys "t"
                   :icon ("checklist" :set "octicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* TODO %?"
                              "%i %a")
                   )
                  ("Personal note" :keys "n"
                   :icon ("sticky-note-o" :set "faicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* %?"
                              "%i %a")
                   )
                  ("University" :keys "u"
                   :icon ("graduation-cap" :set "faicon" :color "purple")
                   :file +org-capture-todo-file
                   :headline "University"
                   :unit-prompt ,(format "%%^{Unit|%s}" (string-join +org-capture-uni-units "|"))
                   :prepend t
                   :type entry
                   :children (("Test" :keys "t"
                               :icon ("timer" :set "material" :color "red")
                               :template ("* TODO [#C] %{unit-prompt} %? :uni:tests:"
                                          "SCHEDULED: %^{Test date:}T"
                                          "%i %a"))
                              ("Assignment" :keys "a"
                               :icon ("library_books" :set "material" :color "orange")
                               :template ("* TODO [#B] %{unit-prompt} %? :uni:assignments:"
                                          "DEADLINE: %^{Due date:}T"
                                          "%i %a"))
                              ("Lecture" :keys "l"
                               :icon ("keynote" :set "fileicon" :color "orange")
                               :template ("* TODO [#C] %{unit-prompt} %? :uni:lecture:"
                                          "%i %a"))
                              ("Miscellaneous task" :keys "u"
                               :icon ("list" :set "faicon" :color "yellow")
                               :template ("* TODO [#D] %{unit-prompt} %? :uni:"
                                          "%i %a"))))
                  ("Interesting" :keys "i"
                   :icon ("eye" :set "faicon" :color "lcyan")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Interesting"
                   :type entry
                   :template ("* [ ] %{desc}%? :%{i-type}:"
                              "%i %a")
                   :children (("Webpage" :keys "w"
                               :icon ("globe" :set "faicon" :color "green")
                               :desc "%(org-cliplink-capture) "
                               :i-type "read:web"
                               )
                              ("Article" :keys "a"
                               :icon ("file-text" :set "octicon" :color "yellow")
                               :desc ""
                               :i-type "read:reaserch"
                               )
                              ("Information" :keys "i"
                               :icon ("info-circle" :set "faicon" :color "blue")
                               :desc ""
                               :i-type "read:info"
                               )
                              ("Idea" :keys "I"
                               :icon ("bubble_chart" :set "material" :color "silver")
                               :desc ""
                               :i-type "idea"
                               )))
                  ("Tasks" :keys "k"
                   :icon ("inbox" :set "octicon" :color "yellow")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Tasks"
                   :type entry
                   :template ("* TODO %? %^G%{extra}"
                              "%i %a")
                   :children (("General Task" :keys "k"
                               :icon ("inbox" :set "octicon" :color "yellow")
                               :extra ""
                               )
                              ("Task with deadline" :keys "d"
                               :icon ("timer" :set "material" :color "orange" :v-adjust -0.1)
                               :extra "\nDEADLINE: %^{Deadline:}t"
                               )
                              ("Scheduled Task" :keys "s"
                               :icon ("calendar" :set "octicon" :color "orange")
                               :extra "\nSCHEDULED: %^{Start time:}t"
                               )
                              ))))))

  (set-org-capture-templates)
  (unless (display-graphic-p)
    (add-hook 'server-after-make-frame-hook
              (defun org-capture-reinitialise-hook ()
                (when (display-graphic-p)
                  (set-org-capture-templates)
                  (remove-hook 'server-after-make-frame-hook
                               #'org-capture-reinitialise-hook ))))))
#+end_src

#+RESULTS:

** Org-Super-Agenda
Org-agenda but more fancy.
#+begin_src emacs-lisp
(map! :leader
      :desc "Org Agenda"
      "a" #'org-agenda-list)
#+end_src

#+begin_src emacs-lisp
(setq org-agenda-scheduled-leaders '("" "")
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100
      org-agenda-compact-blocks t)

(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-super-agenda-groups
        '((:name "Routine and Chores"
           :tag "routine"
           :order 1)
          (:name "Due Today"
           :deadline today
           :order 2)
          (:name "Important"
           :priority "A"
           :order 3)
          (:name "Lectures"
           :todo "LECTURE"
           :order 4)
          (:name "Overdue"
           :deadline past
           :face error
           :order 7)
          (:name "Assignments"
           :tag ":uni:assignments:"
           :todo "HOMEWORK"
           :order 10)
          (:name "Projects"
           :tag "idea"
           :order 14)
          (:name "To Read/Watch"
           :todo ("READ" "WATCH")
           :order 30)))
  (setq org-agenda-custom-commands
        '(("o" "Overview"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Today"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Routine and Chores"
                             :tag "routine"
                             :order 1)
                            (:name "Due Today"
                             :deadline today
                             :order 2)
                            (:name "Important"
                             :priority "A"
                             :order 3)
                            (:name "Lectures"
                             :todo "LECTURE"
                             :order 4)
                            (:name "Overdue"
                             :deadline past
                             :face error
                             :order 7)
                            (:name "Assignments"
                             :tag "HOMEWORK"
                             :order 10)
                            (:name "Projects"
                             :tag "idea"
                             :order 14)
                            (:name "To Read/Watch"
                             :todo ("READ" "WATCH")
                             :order 30)))))))))
  :config
  (org-super-agenda-mode))
#+end_src
** Dired

#+begin_src emacs-lisp
(use-package! dired
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file))
#+end_src
** Window Management
I wasn't comfortable with splitting windows with Ctrl commands.
#+begin_src emacs-lisp
(map! :leader :desc "find-file-other-window" "d" #'find-file-other-window)
#+end_src

** Clang Support
Giving my clang formatter file to emacs and setting a keybinding.
#+begin_src emacs-lisp
(load "/usr/share/clang/clang-format.el")
(global-set-key [C-M-tab] 'clang-format-region)
#+end_src
** Srefactor
#+begin_src emacs-lisp
(require 'srefactor)
(require 'srefactor-lisp)

;; OPTIONAL: ADD IT ONLY IF YOU USE C/C++.
(semantic-mode 1) ;; -> this is optional for Lisp

(define-key c-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)
(define-key c++-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)
(global-set-key (kbd "M-RET o") 'srefactor-lisp-one-line)
(global-set-key (kbd "M-RET m") 'srefactor-lisp-format-sexp)
(global-set-key (kbd "M-RET d") 'srefactor-lisp-format-defun)
(global-set-key (kbd "M-RET b") 'srefactor-lisp-format-buffer)
#+end_src

** Flutter and Dart Setup
#+begin_src emacs-lisp
(after! lsp-dart
  (setq lsp-dart-sdk-dir "/home/penguin/Documents/flutter/bin/cache/dart-sdk/")
  (setq flutter-sdk-path "/home/penguin/Documents/flutter/")
  (setq lsp-dart-flutter-sdk-dir "/home/penguin/Documents/flutter/")
  (setq dart-format-on-save t))
#+end_src

** Latex Config
#+begin_src emacs-lisp
(setq TeX-auto-untabify 't)
#+end_src
** MIPS Formatter
#+begin_src emacs-lisp
(defun asm-mode-setup ()
  (set (make-local-variable 'gofmt-command) "asmfmt")
  (add-hook 'before-save-hook 'gofmt nil t)
)

(add-hook 'asm-mode-hook 'asm-mode-setup)
#+end_src
** Org-gamedb
#+begin_src emacs-lisp
(use-package! org-gamedb
  :defer t
  :config
  (setq org-gamedb-api-key "224983015bb67d4c49074fe795150b9be8addf04"))
#+end_src
** Org-Roam
#+begin_src emacs-lisp
(setq org-roam-directory "~/Dropbox/org/roam")
(server-start)
(require 'org-protocol)
#+end_src
** Org-Pomodoro
#+begin_src emacs-lisp
(setq org-pomodoro-finished-sound "/home/penguin/Documents/openup.wav")
(setq org-pomodoro-short-break-sound "/home/penguin/.emacs.d/.local/straight/build-27.2/org-pomodoro/resources/ticking.wav")
(setq org-pomodoro-long-break-sound-p nil)
(setq org-pomodoro-overtime-sound-p nil)
#+end_src
** Epub
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src
** Org-media
#+begin_src emacs-lisp :tangle yes
(use-package! org-media-note
  :hook (org-mode .  org-media-note-mode)
  :bind (
         ("H-v" . org-media-note-hydra/body))  ;; Main entrance
  :config
  (setq org-media-note-screenshot-image-dir "~/Pictures/"))
#+end_src
