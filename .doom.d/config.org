#+TITLE: Doom Emacs Config
#+AUTHOR: realsontaran
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle config.el

* My Doom Emacs Config
** User
#+BEGIN_SRC emacs-lisp
(setq user-full-name "realsontaran"
      user-mail-address "therealsontaran@protonmailcom")
#+END_SRC

** Font, Theme and Splash Screen
Setting up nice user interface.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-big-font (font-spec :family "JetBrains Mono" :size 20)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 20)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))

(setq display-line-numbers-type t)
(setq fancy-splash-image "~/.doom.d/orangutan1.png")
(setq doom-theme 'doom-dark+)
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))

;; Add some transparency
;; (set-frame-parameter (selected-frame) 'alpha '(90 90))
;; (add-to-list 'default-frame-alist '(alpha 90 90))
(windmove-default-keybindings)
#+END_SRC

** Variable Setting
Setting some values.
#+BEGIN_SRC emacs-lisp
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t)

;; (setq doom-fallback-buffer-name "► Doom"
;;       +doom-dashboard-name "► Doom")

;; Mode-line
(display-time-mode t)
(unless (equal "Battery status not available"
               (battery))
  (display-battery-mode 1))
(setq auth-sources '("~/.authinfo"))
#+END_SRC
** Which-Key Pop-Up
#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.5)
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+END_SRC
** ORG-MODE
Setting todo keywords, org-agenda directories and some keymapping for funcional workspace.
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-directory "~/Workshop/BooksAndNotes/org/")
  (setq org-log-done 'time)
  (setq org-agenda-files (directory-files-recursively "~/Workshop/BooksAndNotes/org/" "\\.org$"))
  (setq org-todo-keywords
        '((sequence "TODO" "PROJ" "HOMWRK" "|" "DONE" "CNCL")
          (sequence "TODAY" "NEXT" "IMPORTANT" "READ")
          (sequence "[ ]" "[-]" "|" "[X]")
          (sequence "LECTURE(l)" "|")
          ))
  (setq org-todo-keyword-faces
        '(("TODO" . "orange")
          ("HOMWRK" . "orange")
          ("DONE" . "green")
          ("CNCL" . (:foreground "red" :weight bold))
          ("LECTURE" . "purple")
          ("[ ]" . "orange")
          ("[-]" . "yellow")
          ("[X]" . "green")
          ))
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda ()
                             (org-bullets-mode 1)
                             (prettify-symbols-mode)))
  (map!
   :map 'org-mode-map
   :localleader
   :ni "U" #'org-latex-preview)

  (map!
   :map 'org-mode-map
   :localleader
   :ni "v" #'org-insert-clipboard-image))

;; Create new Org buffer.
(evil-define-command evil-buffer-org-new (count file)
  "Creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)))))
(map! :leader
      (:prefix "b"
       :desc "New empty ORG buffer" "o" #'evil-buffer-org-new))
#+END_SRC

Function that inserts image to org file from clipboard.

#+BEGIN_SRC emacs-lisp
(defun org-insert-clipboard-image ()
  "Insert screenshot to org file"
  (interactive)
  (make-directory "./resources/" :parents)
  (let ((filename (concat (format-time-string "%Y_%m_%d_%H%M%S") ".png")))
    (shell-command (concat "cd resources && " "xclip -selection clipboard -t image/png -o > " filename))
    (insert (concat "[[./resources/" filename "]]"))))
#+END_SRC
** Org-Super-Agenda
#+BEGIN_SRC emacs-lisp
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100
      org-agenda-compact-blocks t)

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "IMPORTANT"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Assignments"
                           :tag "HOMWRK"
                           :order 10)
                          (:name "Projects"
                           :tag "PROJ"
                           :order 14)
                          (:name "To read"
                           :tag "Read"
                           :order 15)))))))))
#+END_SRC
** Window Keybinding
I wasn't comfortable with splitting windows with Ctrl commands.
#+BEGIN_SRC emacs-lisp
(map! :leader :desc "find-file-other-window" "d" #'find-file-other-window)
#+END_SRC

** Clang Support
Giving my clang formatter file to emacs and setting a keybinding.
#+BEGIN_SRC emacs-lisp
(load "/usr/share/clang/clang-format.el")
(global-set-key [C-M-tab] 'clang-format-region)
#+END_SRC

** Flutter and Dart Setup
#+begin_src emacs-lisp
(after! lsp-dart
  (setq lsp-dart-sdk-dir "/home/penguin/Documents/flutter/bin/cache/dart-sdk/")
  (setq flutter-sdk-path "/home/penguin/Documents/flutter/")
  (setq lsp-dart-flutter-sdk-dir "/home/penguin/Documents/flutter/"))
#+end_src

** Treemacs Configuration
Changing and adding some icons to the treemacs configuration.
#+BEGIN_SRC emacs-lisp
(after! treemacs
  (treemacs-modify-theme "Default"
                         :icon-directory (f-join treemacs-dir "icons/default/vsc")
                         :config
                         (progn
                           (treemacs-create-icon :file "cmake.png"  :extensions ("cmakecache.txt"))
                           (treemacs-create-icon :file "cmake.png"  :extensions ("cmakelists.txt"))))
  (treemacs-create-icon :file "txt.png"  :extensions ("txt"))
  (setq doom-themes-treemacs-theme "Default"))
#+END_SRC

** Discord Support for Gamers
My Elcord package configuration with personal discord app to rich presence.
#+BEGIN_SRC emacs-lisp
(require 'elcord)
(after! elcord
  (setq  elcord-client-id "776170979415031819"
         elcord-use-major-mode-as-main-icon t
         elcord--editor-icon "emacs_icon")
  (push '(dart-mode . "dart-mode_icon") elcord-mode-icon-alist)
  (push '("Org-Agenda" . "org-mode_icon") elcord-mode-icon-alist)
  (push '("pdf-view" . "pdf-mode_icon") elcord-mode-icon-alist))
#+END_SRC

** EWW
EWW is the Emacs Web Wowser, the builtin browser in Emacs. SPC-e was available for this job.
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
(map! :leader
      :desc "Eww web browser"
      "e w" #'eww
      :leader
      :desc "Eww reload page"
      "e R" #'eww-reload
      :leader
      :desc "Search web for text between BEG/END"
      "s w" #'eww-search-words)
#+END_SRC

** EXWM
EXWM is Emacs based window manager.There is DistroTube configuration with small changes in case urge of WM hopping .d.
#+BEGIN_SRC emacs-lisp
(require 'exwm)
(require 'exwm-config)
(require 'exwm-systemtray)
(exwm-systemtray-enable)
(require 'exwm-randr)
(exwm-randr-enable)
(add-hook 'exwm-randr-screen-change-hook
          (lambda ()
            (start-process-shell-command
             "xrandr" nil "xrandr --output eDPI1 --mode 1920x1080 --pos 0x0 --rotate normal")))
(setq exwm-workspace-number 10
      exwm-randr-workspace-output-plist '(0 "eDPI1")
      exwm-input-prefix-keys '(?\M-x ?\M-:)
      exwm-input-simulation-keys '(([?\s-F] . [?\C-f]))
      exwm-input-global-keys '(([?\s-&] . (lambda (command)
                                            (interactive (list (read-shell-command "$ ")))
                                            (start-process-shell-command command nil command)))
                               ;; splits
                               ([?\s-v] . evil-window-vsplit)
                               ([?\s-z] . evil-window-split)
                               ;; managing workspaces
                               ([?\s-w] . exwm-workspace-switch)
                               ([?\s-W] . exwm-workspace-swap)
                               ([?\s-\C-w] . exwm-workspace-move)
                               ;; essential programs
                               ([?\s-d] . dired)
                               ([s-return] . eshell)
                               ([s-S-return] . dmenu)
                               ;; killing buffers and windows
                               ([?\s-b] . ibuffer)
                               ([?\s-B] . kill-current-buffer)
                               ([?\s-c] . +workspace/close-window-or-workspace)
                               ;; change window focus with super+h,j,k,l
                               ([?\s-h] . evil-window-left)
                               ([?\s-j] . evil-window-next)
                               ([?\s-k] . evil-window-prev)
                               ([?\s-l] . evil-window-right)
                               ;; move windows around using SUPER+SHIFT+h,j,k,l
                               ([?\s-H] . +evil/window-move-left)
                               ([?\s-J] . +evil/window-move-down)
                               ([?\s-K] . +evil/window-move-up)
                               ([?\s-L] . +evil/window-move-right)
                               ;; move window to far left or far right with SUPER+CTRL+h,l
                               ([?\s-\C-h] . side-left-window)
                               ([?\s-\C-j] . side-bottom-window)
                               ([?\s-\C-l] . side-right-window)
                               ([?\s-\C-d] . side-window-delete-all)
                               ([?\s-\C-r] . resize-window)
                               ;; switch workspace with SUPER+{0-9}
                               ([?\s-0] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
                               ([?\s-1] . (lambda () (interactive) (exwm-workspace-switch-create 1)))
                               ([?\s-2] . (lambda () (interactive) (exwm-workspace-switch-create 2)))
                               ([?\s-3] . (lambda () (interactive) (exwm-workspace-switch-create 3)))
                               ([?\s-4] . (lambda () (interactive) (exwm-workspace-switch-create 4)))
                               ([?\s-5] . (lambda () (interactive) (exwm-workspace-switch-create 5)))
                               ([?\s-6] . (lambda () (interactive) (exwm-workspace-switch-create 6)))
                               ([?\s-7] . (lambda () (interactive) (exwm-workspace-switch-create 7)))
                               ([?\s-8] . (lambda () (interactive) (exwm-workspace-switch-create 8)))
                               ([?\s-9] . (lambda () (interactive) (exwm-workspace-switch-create 9)))
                               ;; move window workspace with SUPER+SHIFT+{0-9}
                               ([?\s-\)] . (lambda () (interactive) (exwm-workspace-move-window 0)))
                               ([?\s-!] . (lambda () (interactive) (exwm-workspace-move-window 1)))
                               ([?\s-@] . (lambda () (interactive) (exwm-workspace-move-window 2)))
                               ([?\s-#] . (lambda () (interactive) (exwm-workspace-move-window 3)))
                               ([?\s-$] . (lambda () (interactive) (exwm-workspace-move-window 4)))
                               ([?\s-%] . (lambda () (interactive) (exwm-workspace-move-window 5)))
                               ([?\s-^] . (lambda () (interactive) (exwm-workspace-move-window 6)))
                               ([?\s-&] . (lambda () (interactive) (exwm-workspace-move-window 7)))
                               ([?\s-*] . (lambda () (interactive) (exwm-workspace-move-window 8)))
                               ([?\s-\(] . (lambda () (interactive) (exwm-workspace-move-window 9)))
                               ;; setting some toggle commands
                               ([?\s-f] . exwm-floating-toggle-floating)
                               ([?\s-m] . exwm-layout-toggle-mode-line)
                               ([f11] . exwm-layout-toggle-fullscreen)))
#+END_SRC

** Latex Config
#+begin_src emacs-lisp
(setq TeX-auto-untabify 't)
#+end_src
